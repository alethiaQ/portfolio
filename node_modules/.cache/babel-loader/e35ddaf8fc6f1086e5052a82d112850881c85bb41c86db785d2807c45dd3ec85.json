{"ast":null,"code":"import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nfunction createProjectionNode(_a) {\n  var attachResizeListener = _a.attachResizeListener,\n    defaultParent = _a.defaultParent,\n    measureScroll = _a.measureScroll,\n    checkIsScrollRoot = _a.checkIsScrollRoot,\n    resetTransform = _a.resetTransform;\n  return /** @class */function () {\n    function ProjectionNode(id, latestValues, parent) {\n      var _this = this;\n      if (latestValues === void 0) {\n        latestValues = {};\n      }\n      if (parent === void 0) {\n        parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      }\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to actually\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      // Note: Currently only running on root node\n      this.potentialNodes = new Map();\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n          _this.clearAllSnapshots();\n        }\n      };\n      this.updateProjection = function () {\n        _this.nodes.forEach(resolveTargetDelta);\n        _this.nodes.forEach(calcProjection);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.id = id;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      id && this.root.registerPotentialNode(id, this);\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    ProjectionNode.prototype.addEventListener = function (name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n      return this.eventHandlers.get(name).add(handler);\n    };\n    ProjectionNode.prototype.notifyListeners = function (name) {\n      var args = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n      var subscriptionManager = this.eventHandlers.get(name);\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n    };\n    ProjectionNode.prototype.hasListeners = function (name) {\n      return this.eventHandlers.has(name);\n    };\n    ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n      this.potentialNodes.set(id, node);\n    };\n    /**\n     * Lifecycles\n     */\n    ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n      var _this = this;\n      var _a;\n      if (isLayoutDirty === void 0) {\n        isLayoutDirty = false;\n      }\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      var _b = this.options,\n        layoutId = _b.layoutId,\n        layout = _b.layout,\n        visualElement = _b.visualElement;\n      if (visualElement && !visualElement.getInstance()) {\n        visualElement.mount(instance);\n      }\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.id && this.root.potentialNodes.delete(this.id);\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n      if (attachResizeListener) {\n        var unblockTimeout_1;\n        var resizeUnblockUpdate_1 = function () {\n          return _this.root.updateBlockedByResize = false;\n        };\n        attachResizeListener(instance, function () {\n          _this.root.updateBlockedByResize = true;\n          clearTimeout(unblockTimeout_1);\n          unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            _this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      }\n      // Only register the handler if it requires layout animation\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", function (_a) {\n          var _b, _c, _d, _e, _f;\n          var delta = _a.delta,\n            hasLayoutChanged = _a.hasLayoutChanged,\n            hasRelativeTargetChanged = _a.hasRelativeTargetChanged,\n            newLayout = _a.layout;\n          if (_this.isTreeAnimationBlocked()) {\n            _this.target = undefined;\n            _this.relativeTarget = undefined;\n            return;\n          }\n          // TODO: Check here if an animation exists\n          var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n          var _g = visualElement.getProps(),\n            onLayoutAnimationStart = _g.onLayoutAnimationStart,\n            onLayoutAnimationComplete = _g.onLayoutAnimationComplete;\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n          var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n          var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n          if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {\n            if (_this.resumeFrom) {\n              _this.resumingFrom = _this.resumeFrom;\n              _this.resumingFrom.resumingFrom = undefined;\n            }\n            _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), {\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            });\n            if (visualElement.shouldReduceMotion) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n            _this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && _this.animationProgress === 0) {\n              _this.finishAnimation();\n            }\n            _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n          }\n          _this.targetLayout = newLayout;\n        });\n      }\n    };\n    ProjectionNode.prototype.unmount = function () {\n      var _a, _b;\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    };\n    // only on the root\n    ProjectionNode.prototype.blockUpdate = function () {\n      this.updateManuallyBlocked = true;\n    };\n    ProjectionNode.prototype.unblockUpdate = function () {\n      this.updateManuallyBlocked = false;\n    };\n    ProjectionNode.prototype.isUpdateBlocked = function () {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    };\n    ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n      var _a;\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    };\n    // Note: currently only running on root node\n    ProjectionNode.prototype.startUpdate = function () {\n      var _a;\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n    };\n    ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n      var _a, _b, _c;\n      if (shouldNotifyListeners === void 0) {\n        shouldNotifyListeners = true;\n      }\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        node.shouldResetTransform = true;\n        /**\n         * TODO: Check we haven't updated the scroll\n         * since the last didUpdate\n         */\n        node.updateScroll();\n      }\n      var _d = this.options,\n        layoutId = _d.layoutId,\n        layout = _d.layout;\n      if (layoutId === undefined && !layout) return;\n      var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    };\n    // Note: Currently only running on root node\n    ProjectionNode.prototype.didUpdate = function () {\n      var updateWasBlocked = this.isUpdateBlocked();\n      // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots();\n      // Flush any scheduled updates\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    };\n    ProjectionNode.prototype.clearAllSnapshots = function () {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    };\n    ProjectionNode.prototype.scheduleUpdateProjection = function () {\n      sync.preRender(this.updateProjection, false, true);\n    };\n    ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n      var _this = this;\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(function () {\n        if (_this.isLayoutDirty) {\n          _this.root.didUpdate();\n        } else {\n          _this.root.checkUpdateFailed();\n        }\n      });\n    };\n    /**\n     * Update measurements\n     */\n    ProjectionNode.prototype.updateSnapshot = function () {\n      if (this.snapshot || !this.instance) return;\n      var measured = this.measure();\n      var layout = this.removeTransform(this.removeElementScroll(measured));\n      roundBox(layout);\n      this.snapshot = {\n        measured: measured,\n        layout: layout,\n        latestValues: {}\n      };\n    };\n    ProjectionNode.prototype.updateLayout = function () {\n      var _a;\n      if (!this.instance) return;\n      // TODO: Incorporate into a forwarded scroll offset\n      this.updateScroll();\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.updateScroll();\n        }\n      }\n      var measured = this.measure();\n      roundBox(measured);\n      var prevLayout = this.layout;\n      this.layout = {\n        measured: measured,\n        actual: this.removeElementScroll(measured)\n      };\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.actual);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n    };\n    ProjectionNode.prototype.updateScroll = function () {\n      if (this.options.layoutScroll && this.instance) {\n        this.isScrollRoot = checkIsScrollRoot(this.instance);\n        this.scroll = measureScroll(this.instance);\n      }\n    };\n    ProjectionNode.prototype.resetTransform = function () {\n      var _a;\n      if (!resetTransform) return;\n      var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    };\n    ProjectionNode.prototype.measure = function () {\n      var visualElement = this.options.visualElement;\n      if (!visualElement) return createBox();\n      var box = visualElement.measureViewportBox();\n      // Remove viewport scroll to give page-relative coordinates\n      var scroll = this.root.scroll;\n      if (scroll) {\n        translateAxis(box.x, scroll.x);\n        translateAxis(box.y, scroll.y);\n      }\n      return box;\n    };\n    ProjectionNode.prototype.removeElementScroll = function (box) {\n      var boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        var scroll_1 = node.scroll,\n          options = node.options,\n          isScrollRoot = node.isScrollRoot;\n        if (node !== this.root && scroll_1 && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (isScrollRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            var rootScroll = this.root.scroll;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.y);\n            }\n          }\n          translateAxis(boxWithoutScroll.x, scroll_1.x);\n          translateAxis(boxWithoutScroll.y, scroll_1.y);\n        }\n      }\n      return boxWithoutScroll;\n    };\n    ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n      if (transformOnly === void 0) {\n        transformOnly = false;\n      }\n      var withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.x,\n            y: -node.scroll.y\n          });\n        }\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n      return withTransforms;\n    };\n    ProjectionNode.prototype.removeTransform = function (box) {\n      var _a;\n      var boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        var sourceBox = createBox();\n        var nodeBox = node.measure();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n      }\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n      return boxWithoutTransform;\n    };\n    /**\n     *\n     */\n    ProjectionNode.prototype.setTargetDelta = function (delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n    };\n    ProjectionNode.prototype.setOptions = function (options) {\n      var _a;\n      this.options = __assign(__assign(__assign({}, this.options), options), {\n        crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n      });\n    };\n    ProjectionNode.prototype.clearMeasurements = function () {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    };\n    /**\n     * Frame calculations\n     */\n    ProjectionNode.prototype.resolveTargetDelta = function () {\n      var _a;\n      var _b = this.options,\n        layout = _b.layout,\n        layoutId = _b.layoutId;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        this.relativeParent = this.getClosestProjectingParent();\n        if (this.relativeParent && this.relativeParent.layout) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.actual);\n        } else {\n          copyBoxInto(this.target, this.layout.actual);\n        }\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.actual);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        this.relativeParent = this.getClosestProjectingParent();\n        if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n    };\n    ProjectionNode.prototype.getClosestProjectingParent = function () {\n      if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    };\n    ProjectionNode.prototype.calcProjection = function () {\n      var _a;\n      var _b = this.options,\n        layout = _b.layout,\n        layoutId = _b.layoutId;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n      if (!this.layout || !(layout || layoutId)) return;\n      var lead = this.getLead();\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n      copyBoxInto(this.layoutCorrected, this.layout.actual);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n      var target = lead.target;\n      if (!target) return;\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n      var prevTreeScaleX = this.treeScale.x;\n      var prevTreeScaleY = this.treeScale.y;\n      var prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    };\n    ProjectionNode.prototype.hide = function () {\n      this.isVisible = false;\n      // TODO: Schedule render\n    };\n    ProjectionNode.prototype.show = function () {\n      this.isVisible = true;\n      // TODO: Schedule render\n    };\n    ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n      var _a, _b, _c;\n      if (notifyAll === void 0) {\n        notifyAll = true;\n      }\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    };\n    ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n      var _this = this;\n      var _a;\n      if (hasOnlyRelativeTargetChanged === void 0) {\n        hasOnlyRelativeTargetChanged = false;\n      }\n      var snapshot = this.snapshot;\n      var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n      var mixedValues = __assign({}, this.latestValues);\n      var targetDelta = createDelta();\n      this.relativeTarget = this.relativeTargetOrigin = undefined;\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      var relativeLayout = createBox();\n      var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n      var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n      var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n      this.mixTargetDelta = function (latest) {\n        var _a;\n        var progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        _this.setTargetDelta(targetDelta);\n        if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n          mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n        }\n        if (isSharedLayoutAnimation) {\n          _this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n        _this.root.scheduleUpdateProjection();\n        _this.scheduleRender();\n        _this.animationProgress = progress;\n      };\n      this.mixTargetDelta(0);\n    };\n    ProjectionNode.prototype.startAnimation = function (options) {\n      var _this = this;\n      var _a, _b;\n      this.notifyListeners(\"animationStart\");\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n      this.pendingAnimation = sync.update(function () {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), {\n          onUpdate: function (latest) {\n            var _a;\n            _this.mixTargetDelta(latest);\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: function () {\n            var _a;\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n            _this.completeAnimation();\n          }\n        }));\n        if (_this.resumingFrom) {\n          _this.resumingFrom.currentAnimation = _this.currentAnimation;\n        }\n        _this.pendingAnimation = undefined;\n      });\n    };\n    ProjectionNode.prototype.completeAnimation = function () {\n      var _a;\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    };\n    ProjectionNode.prototype.finishAnimation = function () {\n      var _a;\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n      this.completeAnimation();\n    };\n    ProjectionNode.prototype.applyTransformsToTarget = function () {\n      var _a = this.getLead(),\n        targetWithTransforms = _a.targetWithTransforms,\n        target = _a.target,\n        layout = _a.layout,\n        latestValues = _a.latestValues;\n      if (!targetWithTransforms || !target || !layout) return;\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its actual layout\n       * into the desired bounding box.\n       */\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    };\n    ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n      var _a, _b, _c;\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n      var stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    };\n    ProjectionNode.prototype.isLead = function () {\n      var stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    };\n    ProjectionNode.prototype.getLead = function () {\n      var _a;\n      var layoutId = this.options.layoutId;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    };\n    ProjectionNode.prototype.getPrevLead = function () {\n      var _a;\n      var layoutId = this.options.layoutId;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    };\n    ProjectionNode.prototype.getStack = function () {\n      var layoutId = this.options.layoutId;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    };\n    ProjectionNode.prototype.promote = function (_a) {\n      var _b = _a === void 0 ? {} : _a,\n        needsReset = _b.needsReset,\n        transition = _b.transition,\n        preserveFollowOpacity = _b.preserveFollowOpacity;\n      var stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n      if (transition) this.setOptions({\n        transition: transition\n      });\n    };\n    ProjectionNode.prototype.relegate = function () {\n      var stack = this.getStack();\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    };\n    ProjectionNode.prototype.resetRotation = function () {\n      var visualElement = this.options.visualElement;\n      if (!visualElement) return;\n      // If there's no detected rotation values, we can early return without a forced render.\n      var hasRotate = false;\n      // Keep a record of all the values we've reset\n      var resetValues = {};\n      // Check the rotate value of all axes and reset to 0\n      for (var i = 0; i < transformAxes.length; i++) {\n        var axis = transformAxes[i];\n        var key = \"rotate\" + axis;\n        // If this rotation doesn't exist as a motion value, then we don't\n        // need to reset it\n        if (!visualElement.getStaticValue(key)) {\n          continue;\n        }\n        hasRotate = true;\n        // Record the rotation and then temporarily set it to 0\n        resetValues[key] = visualElement.getStaticValue(key);\n        visualElement.setStaticValue(key, 0);\n      }\n      // If there's no rotation values, we don't need to do any more.\n      if (!hasRotate) return;\n      // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n      // Put back all the values we reset\n      for (var key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      }\n      // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n      visualElement.scheduleRender();\n    };\n    ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n      var _a, _b, _c, _d, _e, _f;\n      if (styleProp === void 0) {\n        styleProp = {};\n      }\n      // TODO: Return lifecycle-persistent object\n      var styles = {};\n      if (!this.instance || this.isSVG) return styles;\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n      var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n      var lead = this.getLead();\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        var emptyStyles = {};\n        if (this.options.layoutId) {\n          emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n        return emptyStyles;\n      }\n      var valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n      var _g = this.projectionDelta,\n        x = _g.x,\n        y = _g.y;\n      styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its actual\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n      for (var key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        var _h = scaleCorrectors[key],\n          correct = _h.correct,\n          applyTo = _h.applyTo;\n        var corrected = correct(valuesToRender[key], lead);\n        if (applyTo) {\n          var num = applyTo.length;\n          for (var i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n      return styles;\n    };\n    ProjectionNode.prototype.clearSnapshot = function () {\n      this.resumeFrom = this.snapshot = undefined;\n    };\n    // Only run on root\n    ProjectionNode.prototype.resetTree = function () {\n      this.root.nodes.forEach(function (node) {\n        var _a;\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    };\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c, _d;\n  var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _e = node.layout,\n      layout_1 = _e.actual,\n      measuredLayout = _e.measured;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (node.options.animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout_1[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(layout_1[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n    var visualDelta = createDelta();\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        var _f = node.relativeParent,\n          parentSnapshot = _f.snapshot,\n          parentLayout = _f.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout_1,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notifyBeforeLayoutMeasure();\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["__spreadArray","__read","__assign","sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","transformAxes","FlatTree","resolveMotionValue","globalProjectionState","animationTarget","createProjectionNode","_a","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","id","latestValues","parent","_this","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","prototype","addEventListener","name","handler","has","set","get","add","notifyListeners","args","_i","arguments","subscriptionManager","notify","apply","hasListeners","node","mount","instance","SVGElement","tagName","_b","layoutId","layout","visualElement","getInstance","delete","unblockTimeout_1","resizeUnblockUpdate_1","clearTimeout","window","setTimeout","hasAnimatedSinceResize","finishAnimation","registerSharedNode","_c","_d","_e","_f","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","_g","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","delay","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","scroll_1","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","concat","origin","opacityExit","_h","correct","applyTo","corrected","num","resetTree","layout_1","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","notifyBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/alethiaquintero/portfolio/portfolio_frontend/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nfunction createProjectionNode(_a) {\n    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, checkIsScrollRoot = _a.checkIsScrollRoot, resetTransform = _a.resetTransform;\n    return /** @class */ (function () {\n        function ProjectionNode(id, latestValues, parent) {\n            var _this = this;\n            if (latestValues === void 0) { latestValues = {}; }\n            if (parent === void 0) { parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent(); }\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = function () {\n                if (_this.isUpdating) {\n                    _this.isUpdating = false;\n                    _this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = function () {\n                _this.nodes.forEach(resolveTargetDelta);\n                _this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (var i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        ProjectionNode.prototype.addEventListener = function (name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        };\n        ProjectionNode.prototype.notifyListeners = function (name) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n        };\n        ProjectionNode.prototype.hasListeners = function (name) {\n            return this.eventHandlers.has(name);\n        };\n        ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n            this.potentialNodes.set(id, node);\n        };\n        /**\n         * Lifecycles\n         */\n        ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n            var _this = this;\n            var _a;\n            if (isLayoutDirty === void 0) { isLayoutDirty = false; }\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement = _b.visualElement;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                var unblockTimeout_1;\n                var resizeUnblockUpdate_1 = function () {\n                    return (_this.root.updateBlockedByResize = false);\n                };\n                attachResizeListener(instance, function () {\n                    _this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout_1);\n                    unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        _this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", function (_a) {\n                    var _b, _c, _d, _e, _f;\n                    var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged, hasRelativeTargetChanged = _a.hasRelativeTargetChanged, newLayout = _a.layout;\n                    if (_this.isTreeAnimationBlocked()) {\n                        _this.target = undefined;\n                        _this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n                    var _g = visualElement.getProps(), onLayoutAnimationStart = _g.onLayoutAnimationStart, onLayoutAnimationComplete = _g.onLayoutAnimationComplete;\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    var targetChanged = !_this.targetLayout ||\n                        !boxEquals(_this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !_this.currentAnimation))) {\n                        if (_this.resumeFrom) {\n                            _this.resumingFrom = _this.resumeFrom;\n                            _this.resumingFrom.resumingFrom = undefined;\n                        }\n                        _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), { onPlay: onLayoutAnimationStart, onComplete: onLayoutAnimationComplete });\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        _this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            _this.animationProgress === 0) {\n                            _this.finishAnimation();\n                        }\n                        _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n                    }\n                    _this.targetLayout = newLayout;\n                });\n            }\n        };\n        ProjectionNode.prototype.unmount = function () {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        };\n        // only on the root\n        ProjectionNode.prototype.blockUpdate = function () {\n            this.updateManuallyBlocked = true;\n        };\n        ProjectionNode.prototype.unblockUpdate = function () {\n            this.updateManuallyBlocked = false;\n        };\n        ProjectionNode.prototype.isUpdateBlocked = function () {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        };\n        ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        };\n        // Note: currently only running on root node\n        ProjectionNode.prototype.startUpdate = function () {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        };\n        ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n            var _a, _b, _c;\n            if (shouldNotifyListeners === void 0) { shouldNotifyListeners = true; }\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;\n            if (layoutId === undefined && !layout)\n                return;\n            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        };\n        // Note: Currently only running on root node\n        ProjectionNode.prototype.didUpdate = function () {\n            var updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        };\n        ProjectionNode.prototype.clearAllSnapshots = function () {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        };\n        ProjectionNode.prototype.scheduleUpdateProjection = function () {\n            sync.preRender(this.updateProjection, false, true);\n        };\n        ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n            var _this = this;\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(function () {\n                if (_this.isLayoutDirty) {\n                    _this.root.didUpdate();\n                }\n                else {\n                    _this.root.checkUpdateFailed();\n                }\n            });\n        };\n        /**\n         * Update measurements\n         */\n        ProjectionNode.prototype.updateSnapshot = function () {\n            if (this.snapshot || !this.instance)\n                return;\n            var measured = this.measure();\n            var layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured: measured,\n                layout: layout,\n                latestValues: {},\n            };\n        };\n        ProjectionNode.prototype.updateLayout = function () {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (var i = 0; i < this.path.length; i++) {\n                    var node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            var measured = this.measure();\n            roundBox(measured);\n            var prevLayout = this.layout;\n            this.layout = {\n                measured: measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        };\n        ProjectionNode.prototype.updateScroll = function () {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        };\n        ProjectionNode.prototype.resetTransform = function () {\n            var _a;\n            if (!resetTransform)\n                return;\n            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        };\n        ProjectionNode.prototype.measure = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return createBox();\n            var box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            var scroll = this.root.scroll;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        };\n        ProjectionNode.prototype.removeElementScroll = function (box) {\n            var boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                var scroll_1 = node.scroll, options = node.options, isScrollRoot = node.isScrollRoot;\n                if (node !== this.root && scroll_1 && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        var rootScroll = this.root.scroll;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll_1.x);\n                    translateAxis(boxWithoutScroll.y, scroll_1.y);\n                }\n            }\n            return boxWithoutScroll;\n        };\n        ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n            if (transformOnly === void 0) { transformOnly = false; }\n            var withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        };\n        ProjectionNode.prototype.removeTransform = function (box) {\n            var _a;\n            var boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                var sourceBox = createBox();\n                var nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        };\n        /**\n         *\n         */\n        ProjectionNode.prototype.setTargetDelta = function (delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        };\n        ProjectionNode.prototype.setOptions = function (options) {\n            var _a;\n            this.options = __assign(__assign(__assign({}, this.options), options), { crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true });\n        };\n        ProjectionNode.prototype.clearMeasurements = function () {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        };\n        /**\n         * Frame calculations\n         */\n        ProjectionNode.prototype.resolveTargetDelta = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        };\n        ProjectionNode.prototype.getClosestProjectingParent = function () {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        };\n        ProjectionNode.prototype.calcProjection = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            var lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            var target = lead.target;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            var prevTreeScaleX = this.treeScale.x;\n            var prevTreeScaleY = this.treeScale.y;\n            var prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        };\n        ProjectionNode.prototype.hide = function () {\n            this.isVisible = false;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.show = function () {\n            this.isVisible = true;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n            var _a, _b, _c;\n            if (notifyAll === void 0) { notifyAll = true; }\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        };\n        ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n            var _this = this;\n            var _a;\n            if (hasOnlyRelativeTargetChanged === void 0) { hasOnlyRelativeTargetChanged = false; }\n            var snapshot = this.snapshot;\n            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            var mixedValues = __assign({}, this.latestValues);\n            var targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            var relativeLayout = createBox();\n            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = function (latest) {\n                var _a;\n                var progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                _this.setTargetDelta(targetDelta);\n                if (_this.relativeTarget &&\n                    _this.relativeTargetOrigin &&\n                    _this.layout &&\n                    ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n                    mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    _this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                _this.root.scheduleUpdateProjection();\n                _this.scheduleRender();\n                _this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        };\n        ProjectionNode.prototype.startAnimation = function (options) {\n            var _this = this;\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(function () {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), { onUpdate: function (latest) {\n                        var _a;\n                        _this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    }, onComplete: function () {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        _this.completeAnimation();\n                    } }));\n                if (_this.resumingFrom) {\n                    _this.resumingFrom.currentAnimation = _this.currentAnimation;\n                }\n                _this.pendingAnimation = undefined;\n            });\n        };\n        ProjectionNode.prototype.completeAnimation = function () {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        };\n        ProjectionNode.prototype.finishAnimation = function () {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        };\n        ProjectionNode.prototype.applyTransformsToTarget = function () {\n            var _a = this.getLead(), targetWithTransforms = _a.targetWithTransforms, target = _a.target, layout = _a.layout, latestValues = _a.latestValues;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        };\n        ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            var stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        };\n        ProjectionNode.prototype.isLead = function () {\n            var stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        };\n        ProjectionNode.prototype.getLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        };\n        ProjectionNode.prototype.getPrevLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        };\n        ProjectionNode.prototype.getStack = function () {\n            var layoutId = this.options.layoutId;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        };\n        ProjectionNode.prototype.promote = function (_a) {\n            var _b = _a === void 0 ? {} : _a, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;\n            var stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition: transition });\n        };\n        ProjectionNode.prototype.relegate = function () {\n            var stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        };\n        ProjectionNode.prototype.resetRotation = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            var hasRotate = false;\n            // Keep a record of all the values we've reset\n            var resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (var i = 0; i < transformAxes.length; i++) {\n                var axis = transformAxes[i];\n                var key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (var key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        };\n        ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n            var _a, _b, _c, _d, _e, _f;\n            if (styleProp === void 0) { styleProp = {}; }\n            // TODO: Return lifecycle-persistent object\n            var styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            var lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                var emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            var valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            var _g = this.projectionDelta, x = _g.x, y = _g.y;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\"\n                        : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (var key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;\n                var corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        };\n        ProjectionNode.prototype.clearSnapshot = function () {\n            this.resumeFrom = this.snapshot = undefined;\n        };\n        // Only run on root\n        ProjectionNode.prototype.resetTree = function () {\n            this.root.nodes.forEach(function (node) { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        };\n        return ProjectionNode;\n    }());\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c, _d;\n    var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout_1[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (node.options.animationType === \"position\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(layout_1[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        var layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n        var visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n        }\n        var hasLayoutChanged = !isDeltaZero(layoutDelta);\n        var hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;\n                if (parentSnapshot && parentLayout) {\n                    var relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    var relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout: layout_1,\n            snapshot: snapshot,\n            delta: visualDelta,\n            layoutDelta: layoutDelta,\n            hasLayoutChanged: hasLayoutChanged,\n            hasRelativeTargetChanged: hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    var visualElement = node.options.visualElement;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    var searchNode = node.root;\n    for (var i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}